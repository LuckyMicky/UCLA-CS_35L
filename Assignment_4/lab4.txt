Daxuan Shu
2*******1
CS_35L Fall 2017
Assignment_4 lab4.txt

1. get the buggy coreutils

$ wget http://web.cs.ucla.edu/classes/fall17/cs35L/assign/coreutils-with-bug.tar.gz

2. untar it

$ tar -xvzf coreutils-with-bug.tar.gz

3. go to the folder of source code

$ cd coreutils-with-bug/

4. Build

$ pwd

Output:
/u/ee/ugrad/daxuan/Fall2017/CS_35L/Assignment_4/coreutils-with-bug

$ ./configure --prefix='/u/ee/ugrad/daxuan/Fall2017/CS_35L/
Assignment_4/coreutils-with-bug' 

Note: Applying prefix to set the default folder of installation

$ make

However, there is a problem:

In file included from utimecmp.c:41:0:
utimens.h:2:5: error: conflicting types for 'futimens'
 int futimens (int, char const *, struct timespec const [2]);
     ^
In file included from utimecmp.h:25:0,
                 from utimecmp.c:25:
/usr/include/sys/stat.h:373:12: note: previous declaration of 'futimens' was 
here
 extern int futimens (int __fd, const struct timespec __times[2]) __THROW;

The error is caused by a function called futimens that has different parameter
names in two different plasces.

5. get the patch

$ wget http://web.cs.ucla.edu/classes/fall17/cs35L/assign/coreutils.diff

6. have a look at the patch

$ emacs coreutils.diff

I noticed that the old fileneme ends with "~". 
Thus, I removed those "~" using M-%

7. apply the patch

$ patch -p0 < coreutils.diff

The output showed that the patch was applied successfully.

The patch fixed the error in step 4 above by changing the function futimens and
its calls to the function called "coreutils_futimens".

It fixed the error because the function name are different.

8. build again

$ make

This time no error.

$ make install

Now the libraries are installed to ~/Fall2017/CS_35L/Assignment_4
/coreutils-with-bug/

9. Reproduce the bug
a. go out to the Assignment folder

$ cd ..

b. reproduce the bug by using the example the specs gave us
I put those command into a script to save some typing

======================= output_bug.sh =======================

#!/bin/bash                                                                     

tmp=$(mktemp -d)
cd $tmp
touch -d '1918-11-11 11:00 GMT' wwi-armistice
touch now
sleep 1
touch now1
TZ=UTC0 ~/Fall2017/CS_35L/Assignment_4/coreutils-with-bug/bin/ls -lt --full-
time wwi-armistice now now1
cd ~/Fall2017/CS_35L/Assignment_4/
rm -rf $tmp

=============================================================

Then give excute permission to output_bug.sh

$ chmod +x output_bug.sh

Run the script

$ ./output_bug.sh
-rw-r--r-- 1 daxuan eeugrad 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice
-rw-r--r-- 1 daxuan eeugrad 0 2017-10-25 19:39:00.620010649 +0000 now1
-rw-r--r-- 1 daxuan eeugrad 0 2017-10-25 19:38:59.617977022 +0000 now

The bug shows the past as if it is the future. Since the ls -lt command is 
supposed to list the files with the most recent file on the top.

10. Find the bug

In order to keep the source files, I manually typed the commands in my script
output_bug.sh before the line TZ=UTC0 ... 

Now, I am in the temp directory called /tmp/tmp.RTR99JURe1.

I used gdb to debug the buggy ls file.

$ gdb ~/Fall2017/CS_35L/Assignment_4/coreutils-with-bug/bin/ls

First, I want to know what functions are inside the ls file by typing

$ info functions

The output is like:
All defined functions:

File ls.c:
int main(int, char **);
void usage(int);
static size_t calculate_columns(_Bool);
static void clear_files(void);
static int compare_atime(V, V);
static int compare_ctime(V, V);
static int compare_extension(V, V);
static int compare_mtime(V, V);
static int compare_name(V, V);
static int compare_size(V, V);
static int compare_version(V, V);
static int compstr_atime(V, V);
static int compstr_ctime(V, V);
static int compstr_extension(V, V);
static int compstr_mtime(V, V);
static int compstr_name(V, V);
static int compstr_size(V, V);
static _Bool dev_ino_compare(const void *, const void *);
static void dev_ino_free(void *);
static size_t dev_ino_hash(const void *, size_t);
---Type <return> to continue, or q <return> to quit---

Since I did not find any function relating the sequence of the output,
I typed <return> to continue. The output gave me funther funcrions:

static void dired_dump_obstack(const char *, struct obstack *);
static void extract_dirs_from_files(const char *, _Bool);
static void file_failure(_Bool, const char *, const char *);
static void format_user(uid_t, int);
static void format_user_or_group(const char *, unsigned long, int);
static int format_user_width(uid_t);
static _Bool get_funky_string(char **, const char **, _Bool, size_t *);
static uintmax_t gobble_file(const char *, enum filetype, _Bool, const char *);
static void indent(size_t, size_t);
static _Bool is_colored(enum indicator_no);
static size_t length_of_file_name_and_frills(const struct fileinfo *);
static void prep_non_filename_text(void);
static void print_current_files(void);
static void print_file_name_and_frills(const struct fileinfo *);
static void print_long_format(const struct fileinfo *);
static void print_name_with_quoting(const char *, mode_t, int, 
    struct obstack *);
static void print_type_indicator(mode_t);
static void put_indicator(const struct bin_str *);
static void queue_directory(const char *, const char *, _Bool);
static size_t quote_name(FILE *, const char *, const struct quoting_options *, 
    size_t *);
static int rev_cmp_atime(V, V);
---Type <return> to continue, or q <return> to quit---
Although there are few function about print,they are not the functions that 
control the order of output. Thus, I typed <return> again to go through more
functions. The output is:

static int rev_cmp_ctime(V, V);
static int rev_cmp_extension(V, V);
static int rev_cmp_mtime(V, V);
static int rev_cmp_name(V, V);
static int rev_cmp_size(V, V);
static int rev_cmp_version(V, V);
static int rev_str_atime(V, V);
static int rev_str_ctime(V, V);
static int rev_str_extension(V, V);
static int rev_str_mtime(V, V);
static int rev_str_name(V, V);
static int rev_str_size(V, V);
static void sighandler(int);
static void sort_files(void);
static void stophandler(int);
static int xstrcoll(const char *, const char *);

File mbswidth.c:
int gnu_mbswidth(const char *, int);
int mbsnwidth(const char *, size_t, int);

File xalloc-die.c:
void xalloc_die(void);
---Type <return> to continue, or q <return> to quit---

I found there is a function called sort_files(void) which may contribute to the
output order. I am curious about how does it sort the output sequence.

Then I set a break point for the static void sort_files(void) function:

(gdb) break sort_files

Output:

Breakpoint 1 at 0x4040d0: file ls.c, line 2954.

Thus, I know the sort_files function is located at line 2954 in ls.c file.
Then I open another terminal to open the ls.c file in the path ~/Fall2017
/CS_35L/Assignment_4/coreutils-with-bug/src/ls.c

In the static void sort_files (void) function, it looks like this:

int (*func) (V, V);

switch (sort_type)
        {
        case sort_none:
          return;
        case sort_time:
          switch (time_type)
            {
            case time_ctime:
              func = sort_reverse ? rev_cmp_ctime : compare_ctime;
              break;
            case time_mtime:
              func = sort_reverse ? rev_cmp_mtime : compare_mtime;
              break;
            case time_atime:
              func = sort_reverse ? rev_cmp_atime : compare_atime;
              break;
            default:
              abort ();
...
.
.
.

qsort (files, files_index, sizeof *files, func);
}
  
This function initialize a function pointer at the beginning and make it
pointed to some specific function based on the sort time is ctime or mtime.
Then, qsort the lists by passing the function pointer as a parameter.

Thus, The bug might come from the function that the pointer point. In the 
example, the time is time_mtime.

Thus, I set another break point for function cmp_time to see what is going
on when the sort_files function invokes it.

(gdb) break cmp_mtime

Output:

Breakpoint 2 at 0x404f63: cmp_mtime. (4 locations)

(gdb) r -lt --full-time wwi-armistice now now1
Starting program: /u/ee/ugrad/daxuan/Fall2017/CS_35L/Assignment_4/coreutils-with-bug/bin/ls -lt --full-time wwi-armistice now now1

Starting program: /u/ee/ugrad/daxuan/Fall2017/CS_35L/Assignment_4/coreutils-with-bug/bin/ls -lt --full-time wwi-armistice now now1

Breakpoint 1, sort_files () at ls.c:2954
2954	   {
(gdb) s
2962    if (! setjmp (failed_strcoll))
(gdb) s
2964        switch (sort_type)
(gdb) s
2969	  switch (time_type)
(gdb) s
2975	      func = sort_reverse ? rev_cmp_mtime : compare_mtime;
(gdb) s
3034    qsort (files, files_index, sizeof *files, func);
(gdb) s

Breakpoint 2, compare_mtime (a=0x6171a0, b=0x617250) at ls.c:2884
2884	   static int compare_mtime (V a, V b) { return cmp_mtime (a, b, xstrcoll); }
(gdb) s
cmp_mtime (cmp=0x404350 <xstrcoll>, b=0x617250, a=0x6171a0) at ls.c:2884
2884	  static int compare_mtime (V a, V b) { return cmp_mtime (a, b, xstrcoll); }
(gdb) s
timespec_cmp (b=..., a=...) at ../lib/timespec.h:48
48	       int diff = a.tv_sec - b.tv_sec;
(gdb) info locals
diff = 3

this one seems normal

Then I type continue to ran another iteration and found out:

Breakpoint 2, compare_mtime (a=0x6171a0, b=0x617250) at ls.c:2884
2884	   static int compare_mtime (V a, V b) { return cmp_mtime (a, b, xstrcoll); }
(gdb) 
cmp_mtime (cmp=0x404350 <xstrcoll>, b=0x617250, a=0x6171a0) at ls.c:2884
2884	  static int compare_mtime (V a, V b) { return cmp_mtime (a, b, xstrcoll); }
(gdb) 
timespec_cmp (b=..., a=...) at ../lib/timespec.h:48
48	       int diff = a.tv_sec - b.tv_sec;
(gdb) list
43    /* Return negative, zero, positive if A < B, A == B, A > B, respectively.
44       Assume the nanosecond components are in range, or close to it.  */
45	 static inline int
46	 timespec_cmp (struct timespec a, struct timespec b)
47	 {
48	   int diff = a.tv_sec - b.tv_sec;
49	     return diff ? diff : a.tv_nsec - b.tv_nsec;
50	     }
51	     
52	     # if ! HAVE_DECL_NANOSLEEP
(gdb) s
49      return diff ? diff : a.tv_nsec - b.tv_nsec;
(gdb) info locals
diff = 1509402953

(gdb) continue
Continuing.
-rw-r--r-- 1 daxuan eeugrad 0 1918-11-11 03:00:00.000000000 -0800 wwi-armistice
-rw-r--r-- 1 daxuan eeugrad 0 2017-10-30 15:35:53.022610123 -0700 now1
-rw-r--r-- 1 daxuan eeugrad 0 2017-10-30 15:35:50.215297811 -0700 now
 

If we look at the second difference between now and now1, the difference should
be 53-50 = 3s. Is is shown by "diff = 3" in the first iteration.

As the output shown above, the most current files are listed at the end.
Comparing to the year 1918, 2017 has too many seconds elapsed. This huge 
difference results in integer overflow .

To fix this problem, we can using comparation instead of subtraction to avoid 
integer overflow.

(gdb) quit

11. Fix the bug
a. go to the source code folder

$ cd ~/Fall2017/CS_35L/Assignment_4/coreutils-with-bug/lib

b. copy the file to modify "timespec.h"

$ cp timespec.h ~/Fall2017/CS_35L/Assignment_4/
$ cd ../..

c. make the patch

$ emacs timespec.h

go to line 48 where the timespec_cmp function is

M-g g 48

The origincal code is :

static inline int
timespec_cmp (struct timespec a, struct timespec b)
{
  int diff = a.tv_sec - b.tv_sec;
  return diff ? diff : a.tv_nsec - b.tv_nsec;
}

The way that I used to avoid subtraction is using conditional comparation:

return a.tv_sec > b.tv_sec ? 1 : (a.tv_sec < b.tv_sec ? -1: a.tv_nsec - b.tv_ns
ec);

Then I save the modified timespec.h and make the patch

$ diff -u coreutils-with-bug/lib/timespec.h timespec.h > coreutils-with-bug
/patch.diff

Get changelog

$ emacs 
C-X 4 a:

2017-10-31  Daxuan Shu  <daxuan@lnxsrv06.seas.ucla.edu>

        * lib/timespec.h (timespec_cmp):
        Using conditional comparation instead of subtraction to avoid interger
        overflow. 
        This avoids mislist -lt files whose time are far from now.

$ cp ChangeLog lab4.diff
$ cat patch.diff >> lab4.diff

However, in order to using -p0 option for patch command, we need to check the 
path of the diff file.

$ emacs lab4.diff

I replaced 'timespec.h' with 'lib/timespec.h'
and 'coreutils-with-bug/lib/timespec.h' with 'lib/timespec.h'

12. Appling the patch

$ patch -p0 <lab4.diff

patching file lib/timespec.h

$ make

The I copied the output_bug.sh script to a new file called test_patch.sh:
$ cp output_bug.sh test_patch.sh
$ emacs test_patch.sh

- TZ=UTC0 ~/Fall2017/CS_35L/Assignment_4/coreutils-with-bug/bin/ls -lt --full-time wwi-armistice now now1

+ TZ=UTC0 ~/Fall2017/CS_35L/Assignment_4/coreutils-with-bug/src/ls -lt --full-time wwi-armistice now now1

Save the file and give the excutable mode:

$ chmod +x test_patch.sh
$ ./test_patch.sh

Output:

-rw-r--r-- 1 daxuan eeugrad 0 2017-10-31 22:06:35.025132143 +0000 now1
-rw-r--r-- 1 daxuan eeugrad 0 2017-10-31 22:06:34.023099214 +0000 now
-rw-r--r-- 1 daxuan eeugrad 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice

Now the order is correct.

13. Test with SEASnet Machine

$ cd ~
$ touch -d '1918-11-11 11:00 GMT' wwi-armistice
$ touch now
$ touch now1
$ TZ=UTC0 ls -lt --full-time wwi-armistice now now1
-rw-r--r-- 1 daxuan eeugrad 0 2054-12-17 17:28:16.000000000 +0000 wwi-armistice
-rw-r--r-- 1 daxuan eeugrad 0 2017-10-31 22:21:35.486405000 +0000 now1
-rw-r--r-- 1 daxuan eeugrad 0 2017-10-31 22:21:32.790151000 +0000 now

Clearly, the SEASnet server cannot recognize a time as ancient as in 1918,
and it sees it as a very-future 2054 year time.

The reason is that the local linux file system uses 64 bit,
and the largest bit is a sign bit indicating whether the time is in the past
or in the future.

However, the SEASnet uses 32 bit NFS system, which truncates the first 32bit,
including the sign bit. Thus when we check things on the SEASnet computers,
it will return a very future time.
